{"version":3,"sources":["Pokecard.js","Pokedex.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","props","imgSrc","id","className","name","src","alt","type","exp","Pokedex","pokemon","base_experience","useState","pokemonState","setPokemon","setCount","currentlyClickedPokemon","setPokemonClick","currentScore","setCurrentScore","hideAllPokemon","map","p","hide","onClick","count","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","setTimeout","shuffle","index","style","cursor","showPokemon","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f57d77e9.chunk.js","sourcesContent":["import React from 'react';\nimport './Pokecard.css';\n \n\nfunction Pokecard(props) {\n\n    const POKE_API = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\n    let imgSrc = `${POKE_API}${props.id}.png`;\n    // const [pokemon, setPokemon] = useState(pokemon);\n\n    // const hidePokemon = () => {\n\n    //     setPokemon({\n    //         isActive: false\n\n    //     });\n    // }\n    // const [showText, setShowText] = useState(false);\n    // const onClick = () => setShowText(true);\n\n\n\n    return (\n        <div className=\"Pokecard\">\n            <h2>{props.name}</h2>\n            {props.name ? <img src = {imgSrc}  alt={props.name} /> : null}\n            <div className= \"Pokecard-type\">{props.type}</div>\n            <div className= \"Pokecard-exp\">{props.exp}</div>\n\n            \n\n        </div>\n    )\n}\n\nexport default Pokecard\n","    import React, { useState, useEffect} from 'react';\n    import Pokecard from './Pokecard';\n    import './Pokedex.css'\n\n    function Pokedex() {\n        const pokemon = [\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n            {id: 25, name: 'Pikachu', type: 'electrical', base_experience: 112},\n            {id: 39, name: 'JigglyPuff', type: 'normal', base_experience: 95},\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65},\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n            {id: 25, name: 'Pikachu', type: 'electrical', base_experience: 112},\n            {id: 39, name: 'JigglyPuff', type: 'normal', base_experience: 95},\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65},\n        ];\n        const [pokemonState, setPokemon] = useState(pokemon);\n        const [count, setCount] = useState(0);\n        const [currentlyClickedPokemon, setPokemonClick] = useState(-1);\n        const[currentScore, setCurrentScore] = useState(0);\n\n\n        // setPokemon({});\n\n\n        const shuffle = (pokemon) => {\n            // debugger;\n            var currentIndex = pokemon.length, temporaryValue, randomIndex;\n        \n            // While there remain elements to shuffle...\n            while (0 !== currentIndex) {\n        \n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n        \n            // And swap it with the current element.\n            temporaryValue = pokemon[currentIndex];\n            pokemon[currentIndex] = pokemon[randomIndex];\n            pokemon[randomIndex] = temporaryValue;\n            }\n        \n            setPokemon(pokemon);\n            setCurrentScore(0);\n\n            setTimeout(() => {\n                hideAllPokemon();\n              }, 5000);\n        }\n\n        const callCount = () => {\n            setCount(count => count + 1);\n            setCount(count => count + 1);\n        }\n\n        const hidePokemon = (index) => {\n            // debugger;\n            pokemonState[index].hide = true;\n            setPokemon([...pokemonState]);\n        }\n        const showPokemon = (index) => {\n            // debugger;\n            // pokemonState[index].hide = false;\n            // setPokemon([...pokemonState]);\n            \n            if(currentlyClickedPokemon === -1){\n                pokemonState[index].hide = false;\n                setPokemon([...pokemonState]);\n                setPokemonClick(currentlyClickedPokemon => index);\n\n            }\n            if(currentlyClickedPokemon !== -1){\n                pokemonState[index].hide = false;\n                if(pokemonState[index].id === pokemonState[currentlyClickedPokemon].id) {\n                    pokemonState[index].hide = false;\n                    pokemonState[currentlyClickedPokemon].hide = false;\n                    // delete pokemonState[currentlyClickedPokemon];\n                    setPokemonClick(-1);\n                    setPokemon([...pokemonState]);\n                    setCurrentScore(currentScore+1);\n\n                }\n                else {\n                    pokemonState[index].hide = true;\n                    pokemonState[currentlyClickedPokemon].hide = true;\n                    setPokemonClick(-1);\n                    setPokemon([...pokemonState]);\n                }\n\n            }\n        \n        }\n        const hideAllPokemon = () => {\n            // debugger;\n            pokemonState.map((p) => {\n\n            \n                p.hide=true;\n                return p;\n            })\n            setPokemon([...pokemonState]);\n\n\n        }\n        \n        return (\n            <div className= \"Pokedex\">\n                <div className=\"nav-bar\">\n                <h1 className = \"pokedex-title\" onClick={() => callCount()}>Pokemon Matching Game</h1>\n                <h1 className= \"pokedex-score\">Score: {currentScore} </h1>\n                </div>\n                {/* <button onClick={() => hideAllPokemon()}>Hide</button> */}\n                <button className = \"button-play\" onClick={() => shuffle(pokemon)}>Randomize Pokemon</button>\n                <div className=\"Pokedex-cards\">\n                {pokemonState.map((p, index) => (\n                    \n\n                    <div style={{cursor: \"pointer\"} } className=\"pokecard-button\" onClick = {() => showPokemon(index)}> {p.hide ?  <Pokecard />: \n                 <Pokecard id= {p.id} name={p.name} type={p.type} exp = {p.base_experience}/>\n                } \n                </div>\n                ))} \n                </div>\n                 </div>\n        )\n    }\n\n    export default Pokedex\n","import Pokecard from './Pokecard';\nimport './App.css';\nimport Pokedex from './Pokedex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokedex />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}